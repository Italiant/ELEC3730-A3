//     $Date: 2018-05-22 06:24:02 +1000 (Tue, 22 May 2018) $
// $Revision: 1330 $
//   $Author: Peter $

#include "Ass-03.h"

// This is the console task. Can use your code from the previous assignment
// and expand.
//
// The example code is very basic, showing access to the SD card. Note that
// if the SD card is access from both this task and the pulse rate monitor
// task, a MUTEX will be required.
//
// *** MAKE UPDATES TO THE CODE AS REQUIRED ***
//

uint8_t myReadFile();
uint8_t myWriteFile();
uint8_t string_parser(uint8_t *input, uint8_t **strings);

FIL MyFile;
FIL MyFile2, MyFile3;
FRESULT Status;

/*
 *
void Ass_03_Task_01(void const * argument)
{

  uint32_t loop=0;
  uint8_t ts[100];
  uint16_t i;
  Coordinate display;
  char c;

  safe_printf("Hello from Task 1 - Console (serial input)\n");
  safe_printf("INFO: Initialise LCD and TP first...\n");

  // STEPIEN: Initialize and turn on LCD and calibrate the touch panel
  BSP_LCD_Init();
  BSP_LCD_DisplayOn();
  BSP_TP_Init();
  BSP_LCD_Clear(LCD_COLOR_WHITE);
  //
  // Signal other tasks to start
  osSignalSet(myTask02Handle, 1);
  osSignalSet(myTask03Handle, 1);
  osSignalSet(myTask04Handle, 1);

  uint8_t *input1;
  input1 = (uint8_t*)malloc(sizeof(uint8_t)*256);
  free(input1);
  int pos = 0;

  while (1)
  {
	  safe_printf(">");
	  c = getchar();
	  input1[pos] = c;
	  if(input1[pos] == '\r'){

		  input1[pos] = '\0';
		  safe_printf("Input String = %s\n", input1);
		  string_parser(input1);
		  //myReadFile();
		  //myWriteFile();
		  free(input1);
		  pos = 0;

	  }else{
		  safe_printf("Input Character = %c\n", input1[pos]);
		  pos++;
	  }
  }

}

*/

void Ass_03_Task_01(void const * argument)
{

  uint32_t loop=0;
  uint8_t ts[100];
  uint16_t i;
  Coordinate display;
  uint8_t **strs;
  char c;

  safe_printf("Hello from Task 1 - Console (serial input)\n");
  safe_printf("INFO: Initialise LCD and TP first...\n");

  // STEPIEN: Initialize and turn on LCD and calibrate the touch panel
  BSP_LCD_Init();
  BSP_LCD_DisplayOn();
  BSP_TP_Init();
  BSP_LCD_Clear(LCD_COLOR_WHITE);
  //
  // Signal other tasks to start
  osSignalSet(myTask02Handle, 1);
  osSignalSet(myTask03Handle, 1);
  osSignalSet(myTask04Handle, 1);

  uint8_t *input1;
  input1 = (uint8_t*)malloc(sizeof(uint8_t)*100);
  free(input1);
  int pos = 0;

  while (1)
  {
	  safe_printf(">");
	  c = getchar();
	  input1[pos] = c;
	  if(input1[pos] == '\r'){

		  input1[pos] = '\0';
		  safe_printf("Input String = %s\n", input1);
		  string_parser(input1, strs);
		  //myReadFile();
		  //myWriteFile();
		  free(input1);
		  pos = 0;

	  }else{
		  safe_printf("Input Character = %c\n", input1[pos]);
		  pos++;
	  }
  }

}

uint8_t string_parser(uint8_t *input, uint8_t **strings)
{
	safe_printf("here");
    int words = 0; 					// Integer counter for the amount of words entered into the console
    int letters = 0; 					// Integer counter for the amount of letters in each word entered into the console

	 for(int i = 0; input[i] != '\0'; i++){
		    	  // Checking for spaces and the Null character
		    	  if((i > 0 && input[i] == ' ' && input[i-1] != ' ') || (input[i+1] == '\0' && input[i] != ' ')){
		    		   // Checks for each letter in the word by continuing to increment until the end of the word
		    		  if(input[i+1] == '\0'){
		    			  strings[words][letters] = input[i];
		    			  letters++;
		    		  }
		    		  strings[words][letters] = '\0';
		    		  words++;
		    		  letters = 0;
		    	  }
		    	  else if(input[i] == ' '){
		    		  continue;
	 	 	 	  }
		    	  else{
	 	 	 	 	  strings[words][letters] = input[i];
		    		  letters++;
		    	  }
		      }

		      safe_printf("> %s\n", input);
		      safe_printf("Count	: %d\n", words);

		      for(int j = 0; j < words; j++){ // prints out words
		    	  safe_printf("Word(%d)	: %s\n", j, strings[j]);
		      }
		      return 0;
}

uint8_t myReadFile()
{
#define READ_FILE "Hello.txt"
#define BUFF_SIZE 256
	uint8_t rtext[BUFF_SIZE];
	FRESULT res;
	uint32_t bytesread;

	// Open file Hello.txt
	if((res = f_open(&MyFile, READ_FILE, FA_READ)) != FR_OK)
	{
		safe_printf("ERROR: Opening '%s'\n", READ_FILE);
		return 1;
	}
	safe_printf("Task 1: Opened file '%s'\n", READ_FILE);

	// Read data from file
	if ((res = f_read(&MyFile, rtext, BUFF_SIZE-1, &bytesread)) != FR_OK)
	{
		safe_printf("ERROR: Reading '%s'\n", READ_FILE);
		f_close(&MyFile);
		return 1;
	}
	rtext[bytesread] = '\0';
	safe_printf("Task 1: Read: '%s'\n", rtext);

	// Close file
	f_close(&MyFile);

	return 0;
}

uint8_t myWriteFile()
{
#define WRITE_FILE "There.txt"
	FRESULT res;
	UINT byteswritten;

	// Open file There.txt
	if((res = f_open(&MyFile, WRITE_FILE, FA_CREATE_ALWAYS | FA_WRITE)) != FR_OK)
	{
		safe_printf("ERROR: Opening '%s'\n", WRITE_FILE);
		return 1;
	}
	safe_printf("Task 1: Opened file '%s'\n", WRITE_FILE);

	// Write to file
	if ((res = f_write(&MyFile, "Hello", 6, &byteswritten)) != FR_OK)
	{
		safe_printf("ERROR: Writing '%s'\n", WRITE_FILE);
		f_close(&MyFile);
		return 1;
	}
	safe_printf("Task 1: Written: %d bytes\n", byteswritten);

	// Close file
	f_close(&MyFile);


	return 0;
}
